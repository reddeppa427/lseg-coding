name: CI/CD for Hello World

on:
  workflow_dispatch:
  push:
    branches:
      - development # For Dev environment
      - release # For QA environment
      - main # For Production environment

jobs:
  build:
    name: Build and Test
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: |
          mvn -B package --file pom.xml
          #mvn dependency:tree -DoutputType=dot --batch-mode --non-recursive --file="pom.xml"

      - name: Run tests
        run: mvn test
      
      - run: echo $JAVA_HOME    
      
      - uses: snyk/actions/setup@master
      
      - name: Snyk test
        run: snyk test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}          
        with:
          args: --sarif-file-output=snyk.sarif --severity-threshold=high

      - name: Upload SARIF file to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

      # - name: Applying Exec Permissions
      #   run: |
      #     chmod +x ./gradlew

      # - name: Build with Gradle
      #   run: ./gradlew build

      # - name: Run Tests
      #   run: ./gradlew test

  # scan:
  #   name: Security and Quality Scan
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:      
      
  #     - name: Run Snyk to check for vulnerabilities
  #       uses: snyk/actions/maven-3-jdk-11@master
  #       continue-on-error: true # To make sure that SARIF upload gets called
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #       with:
  #         args: --sarif-file-output=snyk.sarif --severity-threshold=high

  #     - name: Upload SARIF file to GitHub Security
  #       uses: github/codeql-action/upload-sarif@v1
  #       with:
  #         sarif_file: snyk.sarif

  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/development'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Push Docker Image to Docker Hub
        run: |
          docker tag hello-world:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/hello-world:dev
          docker push ${{ secrets.DOCKER_USERNAME }}/hello-world:dev
      - name: Deploy to Dev Environment
        run: echo "Deploying to Dev environment..."

  deploy-qa:
    name: Deploy to QA
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/release'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Push Docker Image to Docker Hub
        run: |
          docker tag hello-world:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/hello-world:qa
          docker push ${{ secrets.DOCKER_USERNAME }}/hello-world:qa
      - name: Deploy to QA Environment
        run: echo "Deploying to QA environment..."

  deploy-prod:
    name: Deploy to Prod
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Push Docker Image to Docker Hub
        run: |
          docker tag hello-world:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/hello-world:prod
          docker push ${{ secrets.DOCKER_USERNAME }}/hello-world:prod
      - name: Deploy to Production Environment
        run: echo "Deploying to Production environment..."
